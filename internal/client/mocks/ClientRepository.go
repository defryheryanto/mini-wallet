// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/defryheryanto/mini-wallet/internal/client"

	mock "github.com/stretchr/testify/mock"
)

// ClientRepository is an autogenerated mock type for the ClientRepository type
type ClientRepository struct {
	mock.Mock
}

// FindByToken provides a mock function with given fields: ctx, token
func (_m *ClientRepository) FindByToken(ctx context.Context, token string) (*client.Client, error) {
	ret := _m.Called(ctx, token)

	var r0 *client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.Client, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Client); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByXid provides a mock function with given fields: ctx, xid
func (_m *ClientRepository) FindByXid(ctx context.Context, xid string) (*client.Client, error) {
	ret := _m.Called(ctx, xid)

	var r0 *client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.Client, error)); ok {
		return rf(ctx, xid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Client); ok {
		r0 = rf(ctx, xid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, xid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, data
func (_m *ClientRepository) Insert(ctx context.Context, data *client.Client) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClientRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientRepository creates a new instance of ClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientRepository(t mockConstructorTestingTNewClientRepository) *ClientRepository {
	mock := &ClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
