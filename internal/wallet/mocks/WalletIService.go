// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	wallet "github.com/defryheryanto/mini-wallet/internal/wallet"
	mock "github.com/stretchr/testify/mock"
)

// WalletIService is an autogenerated mock type for the WalletIService type
type WalletIService struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: ctx, walletId, amount
func (_m *WalletIService) AddBalance(ctx context.Context, walletId string, amount float64) error {
	ret := _m.Called(ctx, walletId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, walletId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, params
func (_m *WalletIService) Create(ctx context.Context, params *wallet.CreateWalletParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *wallet.CreateWalletParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeductBalance provides a mock function with given fields: ctx, walletId, amount
func (_m *WalletIService) DeductBalance(ctx context.Context, walletId string, amount float64) error {
	ret := _m.Called(ctx, walletId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, walletId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWalletByXid provides a mock function with given fields: ctx, customerXid
func (_m *WalletIService) GetWalletByXid(ctx context.Context, customerXid string) (*wallet.Wallet, error) {
	ret := _m.Called(ctx, customerXid)

	var r0 *wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*wallet.Wallet, error)); ok {
		return rf(ctx, customerXid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *wallet.Wallet); ok {
		r0 = rf(ctx, customerXid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerXid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, customerXid, isEnabled
func (_m *WalletIService) UpdateStatus(ctx context.Context, customerXid string, isEnabled bool) (*wallet.Wallet, error) {
	ret := _m.Called(ctx, customerXid, isEnabled)

	var r0 *wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*wallet.Wallet, error)); ok {
		return rf(ctx, customerXid, isEnabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *wallet.Wallet); ok {
		r0 = rf(ctx, customerXid, isEnabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, customerXid, isEnabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateWallet provides a mock function with given fields: target
func (_m *WalletIService) ValidateWallet(target *wallet.Wallet) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(*wallet.Wallet) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWalletIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletIService creates a new instance of WalletIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletIService(t mockConstructorTestingTNewWalletIService) *WalletIService {
	mock := &WalletIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
